# Base com CUDA 11.7 runtime e Ubuntu 20.04
#FROM nvidia/cuda:11.7.1-runtime-ubuntu20.04
FROM custom-test:v1
# Definir diretório de trabalho
WORKDIR /workspace/CrossKD

# Usar mirror confiável e instalar Python3 + pip
#RUN sed -i 's|http://archive.ubuntu.com/ubuntu/|http://br.archive.ubuntu.com/ubuntu/|g' /etc/apt/sources.list \
# && apt-get update \
# && apt-get install -y --fix-missing \
#      python3 python3-pip python3-setuptools ca-certificates \
#      git wget curl build-essential \
# && rm -rf /var/lib/apt/lists/*

# Copiar projeto CrossKD e MMDeploy
COPY crosskd/CrossKD /workspace/CrossKD
COPY mmdeploy /workspace/CrossKD/mmdeploy

# Atualizar pip
#RUN pip3 install --upgrade pip

RUN python3 -m pip uninstall -y onnxruntime onnxruntime-gpu && \
    python3 -m pip install --no-cache-dir onnxruntime-gpu==1.15.1 --extra-index-url https://download.pytorch.org/whl/cu117 && \
    python3 -m pip install --no-cache-dir opencv-python-headless==4.8.1.78


ENV CONDA_PREFIX=/opt/conda
ENV LD_LIBRARY_PATH=$CONDA_PREFIX/lib:/usr/local/lib:/usr/local/cuda/lib64:$LD_LIBRARY_PATH


# Instalar apenas runtime necessário para inferência ONNX
#RUN pip3 install --no-cache-dir \
#      onnxruntime-gpu==1.16.0 \
#      pycocotools \
#      mmdeploy-runtime-gpu==1.3.1

# Garantir permissões corretas
RUN chmod -R 755 /workspace/CrossKD

# Variáveis de ambiente CUDA
ENV CUDA_VISIBLE_DEVICES=0
ENV NVIDIA_VISIBLE_DEVICES=all
ENV NVIDIA_DRIVER_CAPABILITIES=compute,utility
ENV CUDA_HOME=/usr/local/cuda
ENV LD_LIBRARY_PATH=/usr/local/cuda/lib64:${LD_LIBRARY_PATH}
ENV PATH=/usr/local/cuda/bin:${PATH}

# Comando padrão
CMD ["python3", "tools/custom_test.py"]
